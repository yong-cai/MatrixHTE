% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bounds_functions_public.R
\name{dpo_bounds_svt_bin_did}
\alias{dpo_bounds_svt_bin_did}
\title{Matrix Frechet Hoeffding Bounds for Difference-in-Differences on Binary Matrices}
\usage{
dpo_bounds_svt_bin_did(
  Treat.Pre,
  Treat.Post,
  Control.Pre,
  Control.Post,
  y1,
  y0,
  smooth = TRUE,
  bandwidth = 0.01,
  hc = FALSE,
  p1 = NULL,
  p0 = NULL,
  keep.diag = FALSE
)
}
\arguments{
\item{Treat.Pre}{Symmetric matrix of outcomes for treated units pre-treatment}

\item{Treat.Post}{Symmetric matrix of outcomes for treated units post-treatment}

\item{Control.Pre}{Symmetric matrix of outcomes for control units pre-treatment}

\item{Control.Post}{Symmetric matrix of outcomes for control units post-treatment}

\item{y1}{y1 in P(\eqn{\Delta}Y0 = y0, \eqn{\Delta}Y1 = y1). Should be 1,0 or -1.}

\item{y0}{y0 in P(\eqn{\Delta}Y0 = y0, \eqn{\Delta}Y1 = y1). Should be 1,0 or -1.}

\item{smooth}{Logical indicating whether or not to smooth.}

\item{bandwidth}{Bandwidth to be used for smoothing. Default is eta = 0.01 as recommended in Chatterjee (2015).}

\item{hc}{Logical indicating whether or not to correct for row and column heterogeneity. See Section 5.2 of Auerbach and Cai (2023).}
}
\value{
A list of bounds and the components.\tabular{ll}{
\code{bounds} \tab Lower and upper bounds for the DPO. \cr
\tab \cr
\code{breakdown} \tab Breakdown of the bounds into the vectorized Frechet-Hoeffding (vf) and eigenvalue-based (evb) components. Trivial bounds for probability are 0 and 1. \cr
}
}
\description{
This function computes bounds for P(\eqn{\Delta}Y0 = y0, \eqn{\Delta}Y1 = y1).
Outcomes are additionally smoothed by singular vector thresholding as in Chatterjee (2015).
Currently only symmetric matrices are supported. Input matrices should contain only 0 or 1.
}
\examples{
# Generate data
Treat.Pre <- matrix(runif(100) > 0.5, 10, 10)*1
Treat.Pre <- Treat.Pre*t(Treat.Pre) # Symmetrize
Control.Pre <- matrix(runif(100) > 0.5, 10, 10)*1
Control.Pre <- Control.Pre*t(Control.Pre) # Symmetrize
Treat.Post <- matrix(runif(100) > 0.3, 10, 10)*1 # Treatment makes 1's more likely
Treat.Post <- Treat.Post*t(Treat.Post) # Symmetrize
Control.Post <- matrix(runif(100) > 0.8, 10, 10)*1
Control.Post <- Control.Post*t(Control.Post) # Symmetrize

dpo_bounds_svt_bin_did(Treat.Pre, Treat.Post, Control.Pre, Control.Post, 1, -1)$bounds 
}
